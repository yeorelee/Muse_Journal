// src/components/MuseAIPanel.jsx
import React, { useState, useEffect } from 'react';
import '../styles/MuseAIPanel.css';

const MuseAIPanel = ({ isOpen, onClose, editorContent, onInsertResponse }) => {
    const [suggestions, setSuggestions] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [selectedQuestion, setSelectedQuestion] = useState('');
    const [aiResponse, setAiResponse] = useState('');
    const [showResponse, setShowResponse] = useState(false);

    // Analyze content and generate suggestions when panel opens
    useEffect(() => {
        if (isOpen && editorContent) {
            setIsLoading(true);
            // Simulate AI processing
            setTimeout(() => {
                const generatedSuggestions = generateSuggestions(editorContent);
                setSuggestions(generatedSuggestions);
                setIsLoading(false);
            }, 1000);
        }
        // Reset when closed
        if (!isOpen) {
            setShowResponse(false);
            setSelectedQuestion('');
            setAiResponse('');
        }
    }, [isOpen, editorContent]);

    // Mock function to generate suggestions based on content
    const generateSuggestions = (content) => {
        // In a real implementation, this would call an AI service
        const text = content.toLowerCase();
        const suggestions = [
            "What emotions were you experiencing during this event?",
            "How might this experience shape your future decisions?",
            "What patterns do you notice in your reactions?",
            "What would you tell someone else facing a similar situation?"
        ];

        // Add content-specific suggestions if we detect certain topics
        if (text.includes('anxious') || text.includes('worry')) {
            suggestions.unshift("What techniques help you manage anxiety?");
        }
        if (text.includes('happy') || text.includes('joy')) {
            suggestions.unshift("What contributed most to your happiness in this moment?");
        }

        return suggestions;
    };

    const handleAskQuestion = (question) => {
        setSelectedQuestion(question);
        setIsLoading(true);
        // Simulate AI response generation
        setTimeout(() => {
            setAiResponse(`This is a mock response to your question: "${question}". In a real implementation, this would be generated by an AI service based on your journal content.`);
            setIsLoading(false);
            setShowResponse(true);
        }, 1500);
    };

    const handleInsertResponse = () => {
        onInsertResponse(`<p><strong>Question:</strong> ${selectedQuestion}</p><p><strong>Muse:</strong> ${aiResponse}</p>`);
        onClose();
    };

    return (
        <div className={`muse-panel ${isOpen ? 'open' : ''}`}>
            <div className="muse-panel-header">
                <h3>Muse AI Assistant</h3>
                <button className="muse-close-btn" onClick={onClose}>Ã—</button>
            </div>

            <div className="muse-panel-content">
                {isLoading && !showResponse && (
                    <div className="muse-loading">
                        <div className="loading-spinner"></div>
                        <p>Analyzing your journal...</p>
                    </div>
                )}

                {!isLoading && !showResponse && (
                    <div className="muse-suggestions">
                        <p className="suggestion-intro">Based on your writing, you might want to reflect on:</p>
                        <ul>
                            {suggestions.map((suggestion, index) => (
                                <li key={index}>
                                    <button
                                        className="suggestion-btn"
                                        onClick={() => handleAskQuestion(suggestion)}
                                    >
                                        {suggestion}
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {showResponse && (
                    <div className="muse-response">
                        <div className="response-question">
                            <p><strong>Question:</strong> {selectedQuestion}</p>
                        </div>

                        {isLoading ? (
                            <div className="muse-loading">
                                <div className="loading-spinner"></div>
                                <p>Thinking...</p>
                            </div>
                        ) : (
                            <div className="response-answer">
                                <p>{aiResponse}</p>
                                <div className="response-actions">
                                    <button
                                        className="secondary-btn"
                                        onClick={() => setShowResponse(false)}
                                    >
                                        Ask another question
                                    </button>
                                    <button
                                        className="primary-btn"
                                        onClick={handleInsertResponse}
                                    >
                                        Insert into journal
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

export default MuseAIPanel;